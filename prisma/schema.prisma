generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  pages         FacebookPage[]
  leads         Lead[]
  notifications Notification[]
  webhookConfigs WebhookConfig[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model FacebookPage {
  id          String   @id @default(cuid())
  pageId      String   @unique
  name        String
  accessToken String
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  leads Lead[]
}

model Lead {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String?
  message     String?
  source      String
  pageId      String
  userId      String
  status      String   @default("new")
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  page FacebookPage @relation(fields: [pageId], references: [id])
  user User         @relation(fields: [userId], references: [id])
  notes Note[]
}

model Note {
  id        String   @id @default(cuid())
  content   String
  leadId    String
  createdAt DateTime @default(now())

  lead Lead @relation(fields: [leadId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model WebhookConfig {
  id            String   @id @default(cuid())
  userId        String
  pageId        String
  pageName      String
  webhookUrl    String
  isActive      Boolean  @default(true)
  authHeader    String?
  customHeaders String?  // JSON string
  lastUsed      DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, pageId])
}